# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.

    The version of the OpenAPI document: 1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from edu_sharing_client.models.user import User

class TestUser(unittest.TestCase):
    """User unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> User:
        """Test User
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `User`
        """
        model = User()
        if include_optional:
            return User(
                properties = {
                    'key' : [
                        ''
                        ]
                    },
                editable = True,
                status = edu_sharing_client.models.user_status.UserStatus(
                    status = 'active', 
                    date = 56, ),
                organizations = [
                    edu_sharing_client.models.organization.Organization(
                        properties = {
                            'key' : [
                                ''
                                ]
                            }, 
                        editable = True, 
                        signup_method = 'simple', 
                        ref = edu_sharing_client.models.node_ref.NodeRef(
                            repo = '', 
                            id = '', 
                            archived = True, 
                            is_home_repo = True, ), 
                        aspects = [
                            ''
                            ], 
                        authority_name = '', 
                        authority_type = 'USER', 
                        group_name = '', 
                        profile = edu_sharing_client.models.group_profile.GroupProfile(
                            group_email = '', 
                            display_name = '', 
                            group_type = '', 
                            scope_type = '', ), 
                        administration_access = True, 
                        shared_folder = edu_sharing_client.models.node_ref.NodeRef(
                            repo = '', 
                            id = '', 
                            archived = True, 
                            is_home_repo = True, ), )
                    ],
                quota = edu_sharing_client.models.user_quota.UserQuota(
                    enabled = True, 
                    size_current = 56, 
                    size_quota = 56, ),
                authority_name = '',
                authority_type = 'USER',
                user_name = '',
                profile = edu_sharing_client.models.user_profile.UserProfile(
                    primary_affiliation = '', 
                    skills = [
                        ''
                        ], 
                    types = [
                        ''
                        ], 
                    vcard = '', 
                    type = [
                        ''
                        ], 
                    first_name = '', 
                    last_name = '', 
                    email = '', 
                    avatar = '', 
                    about = '', ),
                home_folder = edu_sharing_client.models.node_ref.NodeRef(
                    repo = '', 
                    id = '', 
                    archived = True, 
                    is_home_repo = True, ),
                shared_folders = [
                    edu_sharing_client.models.node_ref.NodeRef(
                        repo = '', 
                        id = '', 
                        archived = True, 
                        is_home_repo = True, )
                    ]
            )
        else:
            return User(
                authority_name = '',
                home_folder = edu_sharing_client.models.node_ref.NodeRef(
                    repo = '', 
                    id = '', 
                    archived = True, 
                    is_home_repo = True, ),
        )
        """

    def testUser(self):
        """Test User"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
