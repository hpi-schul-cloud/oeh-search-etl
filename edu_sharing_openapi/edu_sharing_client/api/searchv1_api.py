# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.

    The version of the OpenAPI document: 1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from edu_sharing_client.models.mds_query_criteria import MdsQueryCriteria
from edu_sharing_client.models.node import Node
from edu_sharing_client.models.node_entries import NodeEntries
from edu_sharing_client.models.node_entry import NodeEntry
from edu_sharing_client.models.search_parameters import SearchParameters
from edu_sharing_client.models.search_parameters_facets import SearchParametersFacets
from edu_sharing_client.models.search_result_lrmi import SearchResultLrmi
from edu_sharing_client.models.search_result_node import SearchResultNode

from edu_sharing_client.api_client import ApiClient, RequestSerialized
from edu_sharing_client.api_response import ApiResponse
from edu_sharing_client.rest import RESTResponseType


class SEARCHV1Api:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_metdata(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        node_ids: Annotated[Optional[List[StrictStr]], Field(description="nodeIds")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NodeEntries:
        """get nodes with metadata and collections


        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param node_ids: nodeIds
        :type node_ids: List[str]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_metdata_serialize(
            repository=repository,
            node_ids=node_ids,
            property_filter=property_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NodeEntries",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_metdata_with_http_info(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        node_ids: Annotated[Optional[List[StrictStr]], Field(description="nodeIds")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NodeEntries]:
        """get nodes with metadata and collections


        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param node_ids: nodeIds
        :type node_ids: List[str]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_metdata_serialize(
            repository=repository,
            node_ids=node_ids,
            property_filter=property_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NodeEntries",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_metdata_without_preload_content(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        node_ids: Annotated[Optional[List[StrictStr]], Field(description="nodeIds")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get nodes with metadata and collections


        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param node_ids: nodeIds
        :type node_ids: List[str]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_metdata_serialize(
            repository=repository,
            node_ids=node_ids,
            property_filter=property_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NodeEntries",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_metdata_serialize(
        self,
        repository,
        node_ids,
        property_filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'nodeIds': 'multi',
            'propertyFilter': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if repository is not None:
            _path_params['repository'] = repository
        # process the query parameters
        if node_ids is not None:
            
            _query_params.append(('nodeIds', node_ids))
            
        if property_filter is not None:
            
            _query_params.append(('propertyFilter', property_filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search/v1/metadata/{repository}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_relevant_nodes(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchResultNode:
        """Get relevant nodes for the current user


        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_relevant_nodes_serialize(
            repository=repository,
            property_filter=property_filter,
            max_items=max_items,
            skip_count=skip_count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultNode",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_relevant_nodes_with_http_info(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchResultNode]:
        """Get relevant nodes for the current user


        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_relevant_nodes_serialize(
            repository=repository,
            property_filter=property_filter,
            max_items=max_items,
            skip_count=skip_count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultNode",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_relevant_nodes_without_preload_content(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get relevant nodes for the current user


        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_relevant_nodes_serialize(
            repository=repository,
            property_filter=property_filter,
            max_items=max_items,
            skip_count=skip_count,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultNode",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_relevant_nodes_serialize(
        self,
        repository,
        property_filter,
        max_items,
        skip_count,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'propertyFilter': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if repository is not None:
            _path_params['repository'] = repository
        # process the query parameters
        if property_filter is not None:
            
            _query_params.append(('propertyFilter', property_filter))
            
        if max_items is not None:
            
            _query_params.append(('maxItems', max_items))
            
        if skip_count is not None:
            
            _query_params.append(('skipCount', skip_count))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search/v1/relevant/{repository}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def load_save_search(
        self,
        node_id: Annotated[StrictStr, Field(description="Node id of the search item")],
        content_type: Annotated[Optional[StrictStr], Field(description="Type of element")] = None,
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        sort_properties: Annotated[Optional[List[StrictStr]], Field(description="sort properties")] = None,
        sort_ascending: Annotated[Optional[List[StrictBool]], Field(description="sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        request_body: Annotated[Optional[List[StrictStr]], Field(description="facets")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Node:
        """Load a saved search query.

        Load a saved search query.

        :param node_id: Node id of the search item (required)
        :type node_id: str
        :param content_type: Type of element
        :type content_type: str
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param sort_properties: sort properties
        :type sort_properties: List[str]
        :param sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :type sort_ascending: List[bool]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param request_body: facets
        :type request_body: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._load_save_search_serialize(
            node_id=node_id,
            content_type=content_type,
            max_items=max_items,
            skip_count=skip_count,
            sort_properties=sort_properties,
            sort_ascending=sort_ascending,
            property_filter=property_filter,
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Node",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def load_save_search_with_http_info(
        self,
        node_id: Annotated[StrictStr, Field(description="Node id of the search item")],
        content_type: Annotated[Optional[StrictStr], Field(description="Type of element")] = None,
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        sort_properties: Annotated[Optional[List[StrictStr]], Field(description="sort properties")] = None,
        sort_ascending: Annotated[Optional[List[StrictBool]], Field(description="sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        request_body: Annotated[Optional[List[StrictStr]], Field(description="facets")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Node]:
        """Load a saved search query.

        Load a saved search query.

        :param node_id: Node id of the search item (required)
        :type node_id: str
        :param content_type: Type of element
        :type content_type: str
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param sort_properties: sort properties
        :type sort_properties: List[str]
        :param sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :type sort_ascending: List[bool]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param request_body: facets
        :type request_body: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._load_save_search_serialize(
            node_id=node_id,
            content_type=content_type,
            max_items=max_items,
            skip_count=skip_count,
            sort_properties=sort_properties,
            sort_ascending=sort_ascending,
            property_filter=property_filter,
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Node",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def load_save_search_without_preload_content(
        self,
        node_id: Annotated[StrictStr, Field(description="Node id of the search item")],
        content_type: Annotated[Optional[StrictStr], Field(description="Type of element")] = None,
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        sort_properties: Annotated[Optional[List[StrictStr]], Field(description="sort properties")] = None,
        sort_ascending: Annotated[Optional[List[StrictBool]], Field(description="sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        request_body: Annotated[Optional[List[StrictStr]], Field(description="facets")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Load a saved search query.

        Load a saved search query.

        :param node_id: Node id of the search item (required)
        :type node_id: str
        :param content_type: Type of element
        :type content_type: str
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param sort_properties: sort properties
        :type sort_properties: List[str]
        :param sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :type sort_ascending: List[bool]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param request_body: facets
        :type request_body: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._load_save_search_serialize(
            node_id=node_id,
            content_type=content_type,
            max_items=max_items,
            skip_count=skip_count,
            sort_properties=sort_properties,
            sort_ascending=sort_ascending,
            property_filter=property_filter,
            request_body=request_body,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Node",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _load_save_search_serialize(
        self,
        node_id,
        content_type,
        max_items,
        skip_count,
        sort_properties,
        sort_ascending,
        property_filter,
        request_body,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sortProperties': 'multi',
            'sortAscending': 'multi',
            'propertyFilter': 'multi',
            'request_body': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if node_id is not None:
            _path_params['nodeId'] = node_id
        # process the query parameters
        if content_type is not None:
            
            _query_params.append(('contentType', content_type))
            
        if max_items is not None:
            
            _query_params.append(('maxItems', max_items))
            
        if skip_count is not None:
            
            _query_params.append(('skipCount', skip_count))
            
        if sort_properties is not None:
            
            _query_params.append(('sortProperties', sort_properties))
            
        if sort_ascending is not None:
            
            _query_params.append(('sortAscending', sort_ascending))
            
        if property_filter is not None:
            
            _query_params.append(('propertyFilter', property_filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if request_body is not None:
            _body_params = request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search/v1/queries/load/{nodeId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def save_search(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        metadataset: Annotated[StrictStr, Field(description="ID of metadataset (or \"-default-\" for default metadata set)")],
        query: Annotated[StrictStr, Field(description="ID of query")],
        name: Annotated[StrictStr, Field(description="Name of the new search item")],
        mds_query_criteria: Annotated[List[MdsQueryCriteria], Field(description="search parameters")],
        replace: Annotated[Optional[StrictBool], Field(description="Replace if search with the same name exists")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> NodeEntry:
        """Save a search query.

        Save a search query.

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :type metadataset: str
        :param query: ID of query (required)
        :type query: str
        :param name: Name of the new search item (required)
        :type name: str
        :param mds_query_criteria: search parameters (required)
        :type mds_query_criteria: List[MdsQueryCriteria]
        :param replace: Replace if search with the same name exists
        :type replace: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._save_search_serialize(
            repository=repository,
            metadataset=metadataset,
            query=query,
            name=name,
            mds_query_criteria=mds_query_criteria,
            replace=replace,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NodeEntry",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def save_search_with_http_info(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        metadataset: Annotated[StrictStr, Field(description="ID of metadataset (or \"-default-\" for default metadata set)")],
        query: Annotated[StrictStr, Field(description="ID of query")],
        name: Annotated[StrictStr, Field(description="Name of the new search item")],
        mds_query_criteria: Annotated[List[MdsQueryCriteria], Field(description="search parameters")],
        replace: Annotated[Optional[StrictBool], Field(description="Replace if search with the same name exists")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[NodeEntry]:
        """Save a search query.

        Save a search query.

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :type metadataset: str
        :param query: ID of query (required)
        :type query: str
        :param name: Name of the new search item (required)
        :type name: str
        :param mds_query_criteria: search parameters (required)
        :type mds_query_criteria: List[MdsQueryCriteria]
        :param replace: Replace if search with the same name exists
        :type replace: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._save_search_serialize(
            repository=repository,
            metadataset=metadataset,
            query=query,
            name=name,
            mds_query_criteria=mds_query_criteria,
            replace=replace,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NodeEntry",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def save_search_without_preload_content(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        metadataset: Annotated[StrictStr, Field(description="ID of metadataset (or \"-default-\" for default metadata set)")],
        query: Annotated[StrictStr, Field(description="ID of query")],
        name: Annotated[StrictStr, Field(description="Name of the new search item")],
        mds_query_criteria: Annotated[List[MdsQueryCriteria], Field(description="search parameters")],
        replace: Annotated[Optional[StrictBool], Field(description="Replace if search with the same name exists")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Save a search query.

        Save a search query.

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :type metadataset: str
        :param query: ID of query (required)
        :type query: str
        :param name: Name of the new search item (required)
        :type name: str
        :param mds_query_criteria: search parameters (required)
        :type mds_query_criteria: List[MdsQueryCriteria]
        :param replace: Replace if search with the same name exists
        :type replace: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._save_search_serialize(
            repository=repository,
            metadataset=metadataset,
            query=query,
            name=name,
            mds_query_criteria=mds_query_criteria,
            replace=replace,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "NodeEntry",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _save_search_serialize(
        self,
        repository,
        metadataset,
        query,
        name,
        mds_query_criteria,
        replace,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'MdsQueryCriteria': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if repository is not None:
            _path_params['repository'] = repository
        if metadataset is not None:
            _path_params['metadataset'] = metadataset
        if query is not None:
            _path_params['query'] = query
        # process the query parameters
        if name is not None:
            
            _query_params.append(('name', name))
            
        if replace is not None:
            
            _query_params.append(('replace', replace))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if mds_query_criteria is not None:
            _body_params = mds_query_criteria


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/search/v1/queries/{repository}/{metadataset}/{query}/save',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        metadataset: Annotated[StrictStr, Field(description="ID of metadataset (or \"-default-\" for default metadata set)")],
        query: Annotated[StrictStr, Field(description="ID of query")],
        search_parameters: Annotated[SearchParameters, Field(description="search parameters")],
        content_type: Annotated[Optional[StrictStr], Field(description="Type of element")] = None,
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        sort_properties: Annotated[Optional[List[StrictStr]], Field(description="sort properties")] = None,
        sort_ascending: Annotated[Optional[List[StrictBool]], Field(description="sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchResultNode:
        """Perform queries based on metadata sets.

        Perform queries based on metadata sets.

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :type metadataset: str
        :param query: ID of query (required)
        :type query: str
        :param search_parameters: search parameters (required)
        :type search_parameters: SearchParameters
        :param content_type: Type of element
        :type content_type: str
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param sort_properties: sort properties
        :type sort_properties: List[str]
        :param sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :type sort_ascending: List[bool]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_serialize(
            repository=repository,
            metadataset=metadataset,
            query=query,
            search_parameters=search_parameters,
            content_type=content_type,
            max_items=max_items,
            skip_count=skip_count,
            sort_properties=sort_properties,
            sort_ascending=sort_ascending,
            property_filter=property_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultNode",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_with_http_info(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        metadataset: Annotated[StrictStr, Field(description="ID of metadataset (or \"-default-\" for default metadata set)")],
        query: Annotated[StrictStr, Field(description="ID of query")],
        search_parameters: Annotated[SearchParameters, Field(description="search parameters")],
        content_type: Annotated[Optional[StrictStr], Field(description="Type of element")] = None,
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        sort_properties: Annotated[Optional[List[StrictStr]], Field(description="sort properties")] = None,
        sort_ascending: Annotated[Optional[List[StrictBool]], Field(description="sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchResultNode]:
        """Perform queries based on metadata sets.

        Perform queries based on metadata sets.

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :type metadataset: str
        :param query: ID of query (required)
        :type query: str
        :param search_parameters: search parameters (required)
        :type search_parameters: SearchParameters
        :param content_type: Type of element
        :type content_type: str
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param sort_properties: sort properties
        :type sort_properties: List[str]
        :param sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :type sort_ascending: List[bool]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_serialize(
            repository=repository,
            metadataset=metadataset,
            query=query,
            search_parameters=search_parameters,
            content_type=content_type,
            max_items=max_items,
            skip_count=skip_count,
            sort_properties=sort_properties,
            sort_ascending=sort_ascending,
            property_filter=property_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultNode",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_without_preload_content(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        metadataset: Annotated[StrictStr, Field(description="ID of metadataset (or \"-default-\" for default metadata set)")],
        query: Annotated[StrictStr, Field(description="ID of query")],
        search_parameters: Annotated[SearchParameters, Field(description="search parameters")],
        content_type: Annotated[Optional[StrictStr], Field(description="Type of element")] = None,
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        sort_properties: Annotated[Optional[List[StrictStr]], Field(description="sort properties")] = None,
        sort_ascending: Annotated[Optional[List[StrictBool]], Field(description="sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Perform queries based on metadata sets.

        Perform queries based on metadata sets.

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :type metadataset: str
        :param query: ID of query (required)
        :type query: str
        :param search_parameters: search parameters (required)
        :type search_parameters: SearchParameters
        :param content_type: Type of element
        :type content_type: str
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param sort_properties: sort properties
        :type sort_properties: List[str]
        :param sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :type sort_ascending: List[bool]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_serialize(
            repository=repository,
            metadataset=metadataset,
            query=query,
            search_parameters=search_parameters,
            content_type=content_type,
            max_items=max_items,
            skip_count=skip_count,
            sort_properties=sort_properties,
            sort_ascending=sort_ascending,
            property_filter=property_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultNode",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_serialize(
        self,
        repository,
        metadataset,
        query,
        search_parameters,
        content_type,
        max_items,
        skip_count,
        sort_properties,
        sort_ascending,
        property_filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sortProperties': 'multi',
            'sortAscending': 'multi',
            'propertyFilter': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if repository is not None:
            _path_params['repository'] = repository
        if metadataset is not None:
            _path_params['metadataset'] = metadataset
        if query is not None:
            _path_params['query'] = query
        # process the query parameters
        if content_type is not None:
            
            _query_params.append(('contentType', content_type))
            
        if max_items is not None:
            
            _query_params.append(('maxItems', max_items))
            
        if skip_count is not None:
            
            _query_params.append(('skipCount', skip_count))
            
        if sort_properties is not None:
            
            _query_params.append(('sortProperties', sort_properties))
            
        if sort_ascending is not None:
            
            _query_params.append(('sortAscending', sort_ascending))
            
        if property_filter is not None:
            
            _query_params.append(('propertyFilter', property_filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if search_parameters is not None:
            _body_params = search_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/search/v1/queries/{repository}/{metadataset}/{query}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_by_property(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        content_type: Annotated[Optional[StrictStr], Field(description="Type of element")] = None,
        combine_mode: Annotated[Optional[StrictStr], Field(description="Combine mode, AND or OR, defaults to AND")] = None,
        var_property: Annotated[Optional[List[StrictStr]], Field(description="One (or more) properties to search for, will be combined by specified combine mode")] = None,
        value: Annotated[Optional[List[StrictStr]], Field(description="One (or more) values to search for, matching the properties defined before")] = None,
        comparator: Annotated[Optional[List[StrictStr]], Field(description="(Optional) comparator, only relevant for date or numerical fields, currently allowed =, <=, >=")] = None,
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        sort_properties: Annotated[Optional[List[StrictStr]], Field(description="sort properties")] = None,
        sort_ascending: Annotated[Optional[List[StrictBool]], Field(description="sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchResultNode:
        """Search for custom properties with custom values

        e.g. property=cm:name, value:*Test*

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param content_type: Type of element
        :type content_type: str
        :param combine_mode: Combine mode, AND or OR, defaults to AND
        :type combine_mode: str
        :param var_property: One (or more) properties to search for, will be combined by specified combine mode
        :type var_property: List[str]
        :param value: One (or more) values to search for, matching the properties defined before
        :type value: List[str]
        :param comparator: (Optional) comparator, only relevant for date or numerical fields, currently allowed =, <=, >=
        :type comparator: List[str]
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param sort_properties: sort properties
        :type sort_properties: List[str]
        :param sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :type sort_ascending: List[bool]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_by_property_serialize(
            repository=repository,
            content_type=content_type,
            combine_mode=combine_mode,
            var_property=var_property,
            value=value,
            comparator=comparator,
            max_items=max_items,
            skip_count=skip_count,
            sort_properties=sort_properties,
            sort_ascending=sort_ascending,
            property_filter=property_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultNode",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_by_property_with_http_info(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        content_type: Annotated[Optional[StrictStr], Field(description="Type of element")] = None,
        combine_mode: Annotated[Optional[StrictStr], Field(description="Combine mode, AND or OR, defaults to AND")] = None,
        var_property: Annotated[Optional[List[StrictStr]], Field(description="One (or more) properties to search for, will be combined by specified combine mode")] = None,
        value: Annotated[Optional[List[StrictStr]], Field(description="One (or more) values to search for, matching the properties defined before")] = None,
        comparator: Annotated[Optional[List[StrictStr]], Field(description="(Optional) comparator, only relevant for date or numerical fields, currently allowed =, <=, >=")] = None,
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        sort_properties: Annotated[Optional[List[StrictStr]], Field(description="sort properties")] = None,
        sort_ascending: Annotated[Optional[List[StrictBool]], Field(description="sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchResultNode]:
        """Search for custom properties with custom values

        e.g. property=cm:name, value:*Test*

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param content_type: Type of element
        :type content_type: str
        :param combine_mode: Combine mode, AND or OR, defaults to AND
        :type combine_mode: str
        :param var_property: One (or more) properties to search for, will be combined by specified combine mode
        :type var_property: List[str]
        :param value: One (or more) values to search for, matching the properties defined before
        :type value: List[str]
        :param comparator: (Optional) comparator, only relevant for date or numerical fields, currently allowed =, <=, >=
        :type comparator: List[str]
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param sort_properties: sort properties
        :type sort_properties: List[str]
        :param sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :type sort_ascending: List[bool]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_by_property_serialize(
            repository=repository,
            content_type=content_type,
            combine_mode=combine_mode,
            var_property=var_property,
            value=value,
            comparator=comparator,
            max_items=max_items,
            skip_count=skip_count,
            sort_properties=sort_properties,
            sort_ascending=sort_ascending,
            property_filter=property_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultNode",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_by_property_without_preload_content(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        content_type: Annotated[Optional[StrictStr], Field(description="Type of element")] = None,
        combine_mode: Annotated[Optional[StrictStr], Field(description="Combine mode, AND or OR, defaults to AND")] = None,
        var_property: Annotated[Optional[List[StrictStr]], Field(description="One (or more) properties to search for, will be combined by specified combine mode")] = None,
        value: Annotated[Optional[List[StrictStr]], Field(description="One (or more) values to search for, matching the properties defined before")] = None,
        comparator: Annotated[Optional[List[StrictStr]], Field(description="(Optional) comparator, only relevant for date or numerical fields, currently allowed =, <=, >=")] = None,
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        sort_properties: Annotated[Optional[List[StrictStr]], Field(description="sort properties")] = None,
        sort_ascending: Annotated[Optional[List[StrictBool]], Field(description="sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search for custom properties with custom values

        e.g. property=cm:name, value:*Test*

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param content_type: Type of element
        :type content_type: str
        :param combine_mode: Combine mode, AND or OR, defaults to AND
        :type combine_mode: str
        :param var_property: One (or more) properties to search for, will be combined by specified combine mode
        :type var_property: List[str]
        :param value: One (or more) values to search for, matching the properties defined before
        :type value: List[str]
        :param comparator: (Optional) comparator, only relevant for date or numerical fields, currently allowed =, <=, >=
        :type comparator: List[str]
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param sort_properties: sort properties
        :type sort_properties: List[str]
        :param sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :type sort_ascending: List[bool]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_by_property_serialize(
            repository=repository,
            content_type=content_type,
            combine_mode=combine_mode,
            var_property=var_property,
            value=value,
            comparator=comparator,
            max_items=max_items,
            skip_count=skip_count,
            sort_properties=sort_properties,
            sort_ascending=sort_ascending,
            property_filter=property_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultNode",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_by_property_serialize(
        self,
        repository,
        content_type,
        combine_mode,
        var_property,
        value,
        comparator,
        max_items,
        skip_count,
        sort_properties,
        sort_ascending,
        property_filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'property': 'multi',
            'value': 'multi',
            'comparator': 'multi',
            'sortProperties': 'multi',
            'sortAscending': 'multi',
            'propertyFilter': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if repository is not None:
            _path_params['repository'] = repository
        # process the query parameters
        if content_type is not None:
            
            _query_params.append(('contentType', content_type))
            
        if combine_mode is not None:
            
            _query_params.append(('combineMode', combine_mode))
            
        if var_property is not None:
            
            _query_params.append(('property', var_property))
            
        if value is not None:
            
            _query_params.append(('value', value))
            
        if comparator is not None:
            
            _query_params.append(('comparator', comparator))
            
        if max_items is not None:
            
            _query_params.append(('maxItems', max_items))
            
        if skip_count is not None:
            
            _query_params.append(('skipCount', skip_count))
            
        if sort_properties is not None:
            
            _query_params.append(('sortProperties', sort_properties))
            
        if sort_ascending is not None:
            
            _query_params.append(('sortAscending', sort_ascending))
            
        if property_filter is not None:
            
            _query_params.append(('propertyFilter', property_filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search/v1/custom/{repository}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_contributor(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        search_word: Annotated[StrictStr, Field(description="search word")],
        contributor_kind: Annotated[StrictStr, Field(description="contributor kind")],
        fields: Annotated[Optional[List[StrictStr]], Field(description="define which authority fields should be searched: ['firstname', 'lastname', 'email', 'uuid', 'url']")] = None,
        contributor_properties: Annotated[Optional[List[StrictStr]], Field(description="define which contributor props should be searched: ['ccm:lifecyclecontributer_author', 'ccm:lifecyclecontributer_publisher', ..., 'ccm:metadatacontributer_creator', 'ccm:metadatacontributer_validator']")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Search for contributors


        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param search_word: search word (required)
        :type search_word: str
        :param contributor_kind: contributor kind (required)
        :type contributor_kind: str
        :param fields: define which authority fields should be searched: ['firstname', 'lastname', 'email', 'uuid', 'url']
        :type fields: List[str]
        :param contributor_properties: define which contributor props should be searched: ['ccm:lifecyclecontributer_author', 'ccm:lifecyclecontributer_publisher', ..., 'ccm:metadatacontributer_creator', 'ccm:metadatacontributer_validator']
        :type contributor_properties: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_contributor_serialize(
            repository=repository,
            search_word=search_word,
            contributor_kind=contributor_kind,
            fields=fields,
            contributor_properties=contributor_properties,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_contributor_with_http_info(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        search_word: Annotated[StrictStr, Field(description="search word")],
        contributor_kind: Annotated[StrictStr, Field(description="contributor kind")],
        fields: Annotated[Optional[List[StrictStr]], Field(description="define which authority fields should be searched: ['firstname', 'lastname', 'email', 'uuid', 'url']")] = None,
        contributor_properties: Annotated[Optional[List[StrictStr]], Field(description="define which contributor props should be searched: ['ccm:lifecyclecontributer_author', 'ccm:lifecyclecontributer_publisher', ..., 'ccm:metadatacontributer_creator', 'ccm:metadatacontributer_validator']")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Search for contributors


        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param search_word: search word (required)
        :type search_word: str
        :param contributor_kind: contributor kind (required)
        :type contributor_kind: str
        :param fields: define which authority fields should be searched: ['firstname', 'lastname', 'email', 'uuid', 'url']
        :type fields: List[str]
        :param contributor_properties: define which contributor props should be searched: ['ccm:lifecyclecontributer_author', 'ccm:lifecyclecontributer_publisher', ..., 'ccm:metadatacontributer_creator', 'ccm:metadatacontributer_validator']
        :type contributor_properties: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_contributor_serialize(
            repository=repository,
            search_word=search_word,
            contributor_kind=contributor_kind,
            fields=fields,
            contributor_properties=contributor_properties,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_contributor_without_preload_content(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        search_word: Annotated[StrictStr, Field(description="search word")],
        contributor_kind: Annotated[StrictStr, Field(description="contributor kind")],
        fields: Annotated[Optional[List[StrictStr]], Field(description="define which authority fields should be searched: ['firstname', 'lastname', 'email', 'uuid', 'url']")] = None,
        contributor_properties: Annotated[Optional[List[StrictStr]], Field(description="define which contributor props should be searched: ['ccm:lifecyclecontributer_author', 'ccm:lifecyclecontributer_publisher', ..., 'ccm:metadatacontributer_creator', 'ccm:metadatacontributer_validator']")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search for contributors


        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param search_word: search word (required)
        :type search_word: str
        :param contributor_kind: contributor kind (required)
        :type contributor_kind: str
        :param fields: define which authority fields should be searched: ['firstname', 'lastname', 'email', 'uuid', 'url']
        :type fields: List[str]
        :param contributor_properties: define which contributor props should be searched: ['ccm:lifecyclecontributer_author', 'ccm:lifecyclecontributer_publisher', ..., 'ccm:metadatacontributer_creator', 'ccm:metadatacontributer_validator']
        :type contributor_properties: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_contributor_serialize(
            repository=repository,
            search_word=search_word,
            contributor_kind=contributor_kind,
            fields=fields,
            contributor_properties=contributor_properties,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_contributor_serialize(
        self,
        repository,
        search_word,
        contributor_kind,
        fields,
        contributor_properties,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fields': 'multi',
            'contributorProperties': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if repository is not None:
            _path_params['repository'] = repository
        # process the query parameters
        if search_word is not None:
            
            _query_params.append(('searchWord', search_word))
            
        if contributor_kind is not None:
            
            _query_params.append(('contributorKind', contributor_kind))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if contributor_properties is not None:
            
            _query_params.append(('contributorProperties', contributor_properties))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search/v1/queries/{repository}/contributor',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_facets(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        metadataset: Annotated[StrictStr, Field(description="ID of metadataset (or \"-default-\" for default metadata set)")],
        query: Annotated[StrictStr, Field(description="ID of query")],
        search_parameters_facets: Annotated[SearchParametersFacets, Field(description="facet parameters")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchResultNode:
        """Search in facets.

        Perform queries based on metadata sets.

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :type metadataset: str
        :param query: ID of query (required)
        :type query: str
        :param search_parameters_facets: facet parameters (required)
        :type search_parameters_facets: SearchParametersFacets
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_facets_serialize(
            repository=repository,
            metadataset=metadataset,
            query=query,
            search_parameters_facets=search_parameters_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultNode",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_facets_with_http_info(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        metadataset: Annotated[StrictStr, Field(description="ID of metadataset (or \"-default-\" for default metadata set)")],
        query: Annotated[StrictStr, Field(description="ID of query")],
        search_parameters_facets: Annotated[SearchParametersFacets, Field(description="facet parameters")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchResultNode]:
        """Search in facets.

        Perform queries based on metadata sets.

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :type metadataset: str
        :param query: ID of query (required)
        :type query: str
        :param search_parameters_facets: facet parameters (required)
        :type search_parameters_facets: SearchParametersFacets
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_facets_serialize(
            repository=repository,
            metadataset=metadataset,
            query=query,
            search_parameters_facets=search_parameters_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultNode",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_facets_without_preload_content(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        metadataset: Annotated[StrictStr, Field(description="ID of metadataset (or \"-default-\" for default metadata set)")],
        query: Annotated[StrictStr, Field(description="ID of query")],
        search_parameters_facets: Annotated[SearchParametersFacets, Field(description="facet parameters")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search in facets.

        Perform queries based on metadata sets.

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :type metadataset: str
        :param query: ID of query (required)
        :type query: str
        :param search_parameters_facets: facet parameters (required)
        :type search_parameters_facets: SearchParametersFacets
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_facets_serialize(
            repository=repository,
            metadataset=metadataset,
            query=query,
            search_parameters_facets=search_parameters_facets,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultNode",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_facets_serialize(
        self,
        repository,
        metadataset,
        query,
        search_parameters_facets,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if repository is not None:
            _path_params['repository'] = repository
        if metadataset is not None:
            _path_params['metadataset'] = metadataset
        if query is not None:
            _path_params['query'] = query
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if search_parameters_facets is not None:
            _body_params = search_parameters_facets


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/search/v1/queries/{repository}/{metadataset}/{query}/facets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_fingerprint(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        nodeid: Annotated[StrictStr, Field(description="nodeid")],
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        sort_properties: Annotated[Optional[List[StrictStr]], Field(description="sort properties")] = None,
        sort_ascending: Annotated[Optional[List[StrictBool]], Field(description="sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchResultNode:
        """Perform queries based on metadata sets.

        Perform queries based on metadata sets.

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param nodeid: nodeid (required)
        :type nodeid: str
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param sort_properties: sort properties
        :type sort_properties: List[str]
        :param sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :type sort_ascending: List[bool]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_fingerprint_serialize(
            repository=repository,
            nodeid=nodeid,
            max_items=max_items,
            skip_count=skip_count,
            sort_properties=sort_properties,
            sort_ascending=sort_ascending,
            property_filter=property_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultNode",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_fingerprint_with_http_info(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        nodeid: Annotated[StrictStr, Field(description="nodeid")],
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        sort_properties: Annotated[Optional[List[StrictStr]], Field(description="sort properties")] = None,
        sort_ascending: Annotated[Optional[List[StrictBool]], Field(description="sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchResultNode]:
        """Perform queries based on metadata sets.

        Perform queries based on metadata sets.

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param nodeid: nodeid (required)
        :type nodeid: str
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param sort_properties: sort properties
        :type sort_properties: List[str]
        :param sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :type sort_ascending: List[bool]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_fingerprint_serialize(
            repository=repository,
            nodeid=nodeid,
            max_items=max_items,
            skip_count=skip_count,
            sort_properties=sort_properties,
            sort_ascending=sort_ascending,
            property_filter=property_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultNode",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_fingerprint_without_preload_content(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        nodeid: Annotated[StrictStr, Field(description="nodeid")],
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        sort_properties: Annotated[Optional[List[StrictStr]], Field(description="sort properties")] = None,
        sort_ascending: Annotated[Optional[List[StrictBool]], Field(description="sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Perform queries based on metadata sets.

        Perform queries based on metadata sets.

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param nodeid: nodeid (required)
        :type nodeid: str
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param sort_properties: sort properties
        :type sort_properties: List[str]
        :param sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :type sort_ascending: List[bool]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_fingerprint_serialize(
            repository=repository,
            nodeid=nodeid,
            max_items=max_items,
            skip_count=skip_count,
            sort_properties=sort_properties,
            sort_ascending=sort_ascending,
            property_filter=property_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultNode",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_fingerprint_serialize(
        self,
        repository,
        nodeid,
        max_items,
        skip_count,
        sort_properties,
        sort_ascending,
        property_filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sortProperties': 'multi',
            'sortAscending': 'multi',
            'propertyFilter': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if repository is not None:
            _path_params['repository'] = repository
        if nodeid is not None:
            _path_params['nodeid'] = nodeid
        # process the query parameters
        if max_items is not None:
            
            _query_params.append(('maxItems', max_items))
            
        if skip_count is not None:
            
            _query_params.append(('skipCount', skip_count))
            
        if sort_properties is not None:
            
            _query_params.append(('sortProperties', sort_properties))
            
        if sort_ascending is not None:
            
            _query_params.append(('sortAscending', sort_ascending))
            
        if property_filter is not None:
            
            _query_params.append(('propertyFilter', property_filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/search/v1/queries/{repository}/fingerprint/{nodeid}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_lrmi(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        metadataset: Annotated[StrictStr, Field(description="ID of metadataset (or \"-default-\" for default metadata set)")],
        query: Annotated[StrictStr, Field(description="ID of query")],
        search_parameters: Annotated[SearchParameters, Field(description="search parameters")],
        content_type: Annotated[Optional[StrictStr], Field(description="Type of element")] = None,
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        sort_properties: Annotated[Optional[List[StrictStr]], Field(description="sort properties")] = None,
        sort_ascending: Annotated[Optional[List[StrictBool]], Field(description="sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchResultLrmi:
        """Perform queries based on metadata sets.

        Perform queries based on metadata sets.

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :type metadataset: str
        :param query: ID of query (required)
        :type query: str
        :param search_parameters: search parameters (required)
        :type search_parameters: SearchParameters
        :param content_type: Type of element
        :type content_type: str
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param sort_properties: sort properties
        :type sort_properties: List[str]
        :param sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :type sort_ascending: List[bool]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_lrmi_serialize(
            repository=repository,
            metadataset=metadataset,
            query=query,
            search_parameters=search_parameters,
            content_type=content_type,
            max_items=max_items,
            skip_count=skip_count,
            sort_properties=sort_properties,
            sort_ascending=sort_ascending,
            property_filter=property_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultLrmi",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_lrmi_with_http_info(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        metadataset: Annotated[StrictStr, Field(description="ID of metadataset (or \"-default-\" for default metadata set)")],
        query: Annotated[StrictStr, Field(description="ID of query")],
        search_parameters: Annotated[SearchParameters, Field(description="search parameters")],
        content_type: Annotated[Optional[StrictStr], Field(description="Type of element")] = None,
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        sort_properties: Annotated[Optional[List[StrictStr]], Field(description="sort properties")] = None,
        sort_ascending: Annotated[Optional[List[StrictBool]], Field(description="sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchResultLrmi]:
        """Perform queries based on metadata sets.

        Perform queries based on metadata sets.

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :type metadataset: str
        :param query: ID of query (required)
        :type query: str
        :param search_parameters: search parameters (required)
        :type search_parameters: SearchParameters
        :param content_type: Type of element
        :type content_type: str
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param sort_properties: sort properties
        :type sort_properties: List[str]
        :param sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :type sort_ascending: List[bool]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_lrmi_serialize(
            repository=repository,
            metadataset=metadataset,
            query=query,
            search_parameters=search_parameters,
            content_type=content_type,
            max_items=max_items,
            skip_count=skip_count,
            sort_properties=sort_properties,
            sort_ascending=sort_ascending,
            property_filter=property_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultLrmi",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_lrmi_without_preload_content(
        self,
        repository: Annotated[StrictStr, Field(description="ID of repository (or \"-home-\" for home repository)")],
        metadataset: Annotated[StrictStr, Field(description="ID of metadataset (or \"-default-\" for default metadata set)")],
        query: Annotated[StrictStr, Field(description="ID of query")],
        search_parameters: Annotated[SearchParameters, Field(description="search parameters")],
        content_type: Annotated[Optional[StrictStr], Field(description="Type of element")] = None,
        max_items: Annotated[Optional[StrictInt], Field(description="maximum items per page")] = None,
        skip_count: Annotated[Optional[StrictInt], Field(description="skip a number of items")] = None,
        sort_properties: Annotated[Optional[List[StrictStr]], Field(description="sort properties")] = None,
        sort_ascending: Annotated[Optional[List[StrictBool]], Field(description="sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index")] = None,
        property_filter: Annotated[Optional[List[StrictStr]], Field(description="property filter for result nodes (or \"-all-\" for all properties)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Perform queries based on metadata sets.

        Perform queries based on metadata sets.

        :param repository: ID of repository (or \"-home-\" for home repository) (required)
        :type repository: str
        :param metadataset: ID of metadataset (or \"-default-\" for default metadata set) (required)
        :type metadataset: str
        :param query: ID of query (required)
        :type query: str
        :param search_parameters: search parameters (required)
        :type search_parameters: SearchParameters
        :param content_type: Type of element
        :type content_type: str
        :param max_items: maximum items per page
        :type max_items: int
        :param skip_count: skip a number of items
        :type skip_count: int
        :param sort_properties: sort properties
        :type sort_properties: List[str]
        :param sort_ascending: sort ascending, true if not set. Use multiple values to change the direction according to the given property at the same index
        :type sort_ascending: List[bool]
        :param property_filter: property filter for result nodes (or \"-all-\" for all properties)
        :type property_filter: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_lrmi_serialize(
            repository=repository,
            metadataset=metadataset,
            query=query,
            search_parameters=search_parameters,
            content_type=content_type,
            max_items=max_items,
            skip_count=skip_count,
            sort_properties=sort_properties,
            sort_ascending=sort_ascending,
            property_filter=property_filter,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchResultLrmi",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_lrmi_serialize(
        self,
        repository,
        metadataset,
        query,
        search_parameters,
        content_type,
        max_items,
        skip_count,
        sort_properties,
        sort_ascending,
        property_filter,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'sortProperties': 'multi',
            'sortAscending': 'multi',
            'propertyFilter': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if repository is not None:
            _path_params['repository'] = repository
        if metadataset is not None:
            _path_params['metadataset'] = metadataset
        if query is not None:
            _path_params['query'] = query
        # process the query parameters
        if content_type is not None:
            
            _query_params.append(('contentType', content_type))
            
        if max_items is not None:
            
            _query_params.append(('maxItems', max_items))
            
        if skip_count is not None:
            
            _query_params.append(('skipCount', skip_count))
            
        if sort_properties is not None:
            
            _query_params.append(('sortProperties', sort_properties))
            
        if sort_ascending is not None:
            
            _query_params.append(('sortAscending', sort_ascending))
            
        if property_filter is not None:
            
            _query_params.append(('propertyFilter', property_filter))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if search_parameters is not None:
            _body_params = search_parameters


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/search/v1/queries/{repository}/{metadataset}/{query}/lrmi',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


