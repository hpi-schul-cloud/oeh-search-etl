# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.

    The version of the OpenAPI document: 1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from edu_sharing_client.models.admin import Admin
from edu_sharing_client.models.available_mds import AvailableMds
from edu_sharing_client.models.banner import Banner
from edu_sharing_client.models.collections import Collections
from edu_sharing_client.models.config_frontpage import ConfigFrontpage
from edu_sharing_client.models.config_privacy import ConfigPrivacy
from edu_sharing_client.models.config_publish import ConfigPublish
from edu_sharing_client.models.config_rating import ConfigRating
from edu_sharing_client.models.config_remote import ConfigRemote
from edu_sharing_client.models.config_theme_colors import ConfigThemeColors
from edu_sharing_client.models.config_tutorial import ConfigTutorial
from edu_sharing_client.models.config_upload import ConfigUpload
from edu_sharing_client.models.config_workflow import ConfigWorkflow
from edu_sharing_client.models.context_menu_entry import ContextMenuEntry
from edu_sharing_client.models.font_icon import FontIcon
from edu_sharing_client.models.guest import Guest
from edu_sharing_client.models.help_menu_options import HelpMenuOptions
from edu_sharing_client.models.image import Image
from edu_sharing_client.models.license import License
from edu_sharing_client.models.license_agreement import LicenseAgreement
from edu_sharing_client.models.logout_info import LogoutInfo
from edu_sharing_client.models.mainnav import Mainnav
from edu_sharing_client.models.menu_entry import MenuEntry
from edu_sharing_client.models.register import Register
from edu_sharing_client.models.rendering import Rendering
from edu_sharing_client.models.services import Services
from edu_sharing_client.models.simple_edit import SimpleEdit
from edu_sharing_client.models.stream import Stream
from typing import Optional, Set
from typing_extensions import Self

class Values(BaseModel):
    """
    Values
    """ # noqa: E501
    supported_languages: Optional[List[StrictStr]] = Field(default=None, alias="supportedLanguages")
    extension: Optional[StrictStr] = None
    login_url: Optional[StrictStr] = Field(default=None, alias="loginUrl")
    login_allow_local: Optional[StrictBool] = Field(default=None, alias="loginAllowLocal")
    login_providers_url: Optional[StrictStr] = Field(default=None, alias="loginProvidersUrl")
    login_provider_target_url: Optional[StrictStr] = Field(default=None, alias="loginProviderTargetUrl")
    register: Optional[Register] = None
    recover_password_url: Optional[StrictStr] = Field(default=None, alias="recoverPasswordUrl")
    imprint_url: Optional[StrictStr] = Field(default=None, alias="imprintUrl")
    privacy_information_url: Optional[StrictStr] = Field(default=None, alias="privacyInformationUrl")
    help_url: Optional[StrictStr] = Field(default=None, alias="helpUrl")
    whats_new_url: Optional[StrictStr] = Field(default=None, alias="whatsNewUrl")
    edit_profile_url: Optional[StrictStr] = Field(default=None, alias="editProfileUrl")
    edit_profile: Optional[StrictBool] = Field(default=None, alias="editProfile")
    workspace_columns: Optional[List[StrictStr]] = Field(default=None, alias="workspaceColumns")
    workspace_shared_to_me_default_all: Optional[StrictBool] = Field(default=None, alias="workspaceSharedToMeDefaultAll")
    hide_main_menu: Optional[List[StrictStr]] = Field(default=None, alias="hideMainMenu")
    logout: Optional[LogoutInfo] = None
    menu_entries: Optional[List[MenuEntry]] = Field(default=None, alias="menuEntries")
    custom_options: Optional[List[ContextMenuEntry]] = Field(default=None, alias="customOptions")
    user_menu_overrides: Optional[List[ContextMenuEntry]] = Field(default=None, alias="userMenuOverrides")
    allowed_licenses: Optional[List[StrictStr]] = Field(default=None, alias="allowedLicenses")
    custom_licenses: Optional[List[License]] = Field(default=None, alias="customLicenses")
    workflow: Optional[ConfigWorkflow] = None
    license_dialog_on_upload: Optional[StrictBool] = Field(default=None, alias="licenseDialogOnUpload")
    node_report: Optional[StrictBool] = Field(default=None, alias="nodeReport")
    branding: Optional[StrictBool] = None
    rating: Optional[ConfigRating] = None
    publishing_notice: Optional[StrictBool] = Field(default=None, alias="publishingNotice")
    site_title: Optional[StrictStr] = Field(default=None, alias="siteTitle")
    user_display_name: Optional[StrictStr] = Field(default=None, alias="userDisplayName")
    user_secondary_display_name: Optional[StrictStr] = Field(default=None, alias="userSecondaryDisplayName")
    user_affiliation: Optional[StrictBool] = Field(default=None, alias="userAffiliation")
    default_username: Optional[StrictStr] = Field(default=None, alias="defaultUsername")
    default_password: Optional[StrictStr] = Field(default=None, alias="defaultPassword")
    banner: Optional[Banner] = None
    available_mds: Optional[List[AvailableMds]] = Field(default=None, alias="availableMds")
    available_repositories: Optional[List[StrictStr]] = Field(default=None, alias="availableRepositories")
    search_view_type: Optional[StrictInt] = Field(default=None, alias="searchViewType")
    workspace_view_type: Optional[StrictInt] = Field(default=None, alias="workspaceViewType")
    items_per_request: Optional[StrictInt] = Field(default=None, alias="itemsPerRequest")
    rendering: Optional[Rendering] = None
    session_expired_dialog: Optional[Dict[str, Any]] = Field(default=None, alias="sessionExpiredDialog")
    login_default_location: Optional[StrictStr] = Field(default=None, alias="loginDefaultLocation")
    search_group_results: Optional[StrictBool] = Field(default=None, alias="searchGroupResults")
    mainnav: Optional[Mainnav] = None
    search_sidenav_mode: Optional[StrictStr] = Field(default=None, alias="searchSidenavMode")
    guest: Optional[Guest] = None
    collections: Optional[Collections] = None
    license_agreement: Optional[LicenseAgreement] = Field(default=None, alias="licenseAgreement")
    services: Optional[Services] = None
    help_menu_options: Optional[List[HelpMenuOptions]] = Field(default=None, alias="helpMenuOptions")
    images: Optional[List[Image]] = None
    icons: Optional[List[FontIcon]] = None
    stream: Optional[Stream] = None
    admin: Optional[Admin] = None
    simple_edit: Optional[SimpleEdit] = Field(default=None, alias="simpleEdit")
    frontpage: Optional[ConfigFrontpage] = None
    upload: Optional[ConfigUpload] = None
    publish: Optional[ConfigPublish] = None
    remote: Optional[ConfigRemote] = None
    custom_css: Optional[StrictStr] = Field(default=None, alias="customCSS")
    theme_colors: Optional[ConfigThemeColors] = Field(default=None, alias="themeColors")
    privacy: Optional[ConfigPrivacy] = None
    tutorial: Optional[ConfigTutorial] = None
    __properties: ClassVar[List[str]] = ["supportedLanguages", "extension", "loginUrl", "loginAllowLocal", "loginProvidersUrl", "loginProviderTargetUrl", "register", "recoverPasswordUrl", "imprintUrl", "privacyInformationUrl", "helpUrl", "whatsNewUrl", "editProfileUrl", "editProfile", "workspaceColumns", "workspaceSharedToMeDefaultAll", "hideMainMenu", "logout", "menuEntries", "customOptions", "userMenuOverrides", "allowedLicenses", "customLicenses", "workflow", "licenseDialogOnUpload", "nodeReport", "branding", "rating", "publishingNotice", "siteTitle", "userDisplayName", "userSecondaryDisplayName", "userAffiliation", "defaultUsername", "defaultPassword", "banner", "availableMds", "availableRepositories", "searchViewType", "workspaceViewType", "itemsPerRequest", "rendering", "sessionExpiredDialog", "loginDefaultLocation", "searchGroupResults", "mainnav", "searchSidenavMode", "guest", "collections", "licenseAgreement", "services", "helpMenuOptions", "images", "icons", "stream", "admin", "simpleEdit", "frontpage", "upload", "publish", "remote", "customCSS", "themeColors", "privacy", "tutorial"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Values from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of register
        if self.register:
            _dict['register'] = self.register.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logout
        if self.logout:
            _dict['logout'] = self.logout.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in menu_entries (list)
        _items = []
        if self.menu_entries:
            for _item_menu_entries in self.menu_entries:
                if _item_menu_entries:
                    _items.append(_item_menu_entries.to_dict())
            _dict['menuEntries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_options (list)
        _items = []
        if self.custom_options:
            for _item_custom_options in self.custom_options:
                if _item_custom_options:
                    _items.append(_item_custom_options.to_dict())
            _dict['customOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_menu_overrides (list)
        _items = []
        if self.user_menu_overrides:
            for _item_user_menu_overrides in self.user_menu_overrides:
                if _item_user_menu_overrides:
                    _items.append(_item_user_menu_overrides.to_dict())
            _dict['userMenuOverrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_licenses (list)
        _items = []
        if self.custom_licenses:
            for _item_custom_licenses in self.custom_licenses:
                if _item_custom_licenses:
                    _items.append(_item_custom_licenses.to_dict())
            _dict['customLicenses'] = _items
        # override the default output from pydantic by calling `to_dict()` of workflow
        if self.workflow:
            _dict['workflow'] = self.workflow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict['rating'] = self.rating.to_dict()
        # override the default output from pydantic by calling `to_dict()` of banner
        if self.banner:
            _dict['banner'] = self.banner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in available_mds (list)
        _items = []
        if self.available_mds:
            for _item_available_mds in self.available_mds:
                if _item_available_mds:
                    _items.append(_item_available_mds.to_dict())
            _dict['availableMds'] = _items
        # override the default output from pydantic by calling `to_dict()` of rendering
        if self.rendering:
            _dict['rendering'] = self.rendering.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mainnav
        if self.mainnav:
            _dict['mainnav'] = self.mainnav.to_dict()
        # override the default output from pydantic by calling `to_dict()` of guest
        if self.guest:
            _dict['guest'] = self.guest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of collections
        if self.collections:
            _dict['collections'] = self.collections.to_dict()
        # override the default output from pydantic by calling `to_dict()` of license_agreement
        if self.license_agreement:
            _dict['licenseAgreement'] = self.license_agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of services
        if self.services:
            _dict['services'] = self.services.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in help_menu_options (list)
        _items = []
        if self.help_menu_options:
            for _item_help_menu_options in self.help_menu_options:
                if _item_help_menu_options:
                    _items.append(_item_help_menu_options.to_dict())
            _dict['helpMenuOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in icons (list)
        _items = []
        if self.icons:
            for _item_icons in self.icons:
                if _item_icons:
                    _items.append(_item_icons.to_dict())
            _dict['icons'] = _items
        # override the default output from pydantic by calling `to_dict()` of stream
        if self.stream:
            _dict['stream'] = self.stream.to_dict()
        # override the default output from pydantic by calling `to_dict()` of admin
        if self.admin:
            _dict['admin'] = self.admin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of simple_edit
        if self.simple_edit:
            _dict['simpleEdit'] = self.simple_edit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of frontpage
        if self.frontpage:
            _dict['frontpage'] = self.frontpage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upload
        if self.upload:
            _dict['upload'] = self.upload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of publish
        if self.publish:
            _dict['publish'] = self.publish.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote
        if self.remote:
            _dict['remote'] = self.remote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of theme_colors
        if self.theme_colors:
            _dict['themeColors'] = self.theme_colors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of privacy
        if self.privacy:
            _dict['privacy'] = self.privacy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tutorial
        if self.tutorial:
            _dict['tutorial'] = self.tutorial.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Values from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "supportedLanguages": obj.get("supportedLanguages"),
            "extension": obj.get("extension"),
            "loginUrl": obj.get("loginUrl"),
            "loginAllowLocal": obj.get("loginAllowLocal"),
            "loginProvidersUrl": obj.get("loginProvidersUrl"),
            "loginProviderTargetUrl": obj.get("loginProviderTargetUrl"),
            "register": Register.from_dict(obj["register"]) if obj.get("register") is not None else None,
            "recoverPasswordUrl": obj.get("recoverPasswordUrl"),
            "imprintUrl": obj.get("imprintUrl"),
            "privacyInformationUrl": obj.get("privacyInformationUrl"),
            "helpUrl": obj.get("helpUrl"),
            "whatsNewUrl": obj.get("whatsNewUrl"),
            "editProfileUrl": obj.get("editProfileUrl"),
            "editProfile": obj.get("editProfile"),
            "workspaceColumns": obj.get("workspaceColumns"),
            "workspaceSharedToMeDefaultAll": obj.get("workspaceSharedToMeDefaultAll"),
            "hideMainMenu": obj.get("hideMainMenu"),
            "logout": LogoutInfo.from_dict(obj["logout"]) if obj.get("logout") is not None else None,
            "menuEntries": [MenuEntry.from_dict(_item) for _item in obj["menuEntries"]] if obj.get("menuEntries") is not None else None,
            "customOptions": [ContextMenuEntry.from_dict(_item) for _item in obj["customOptions"]] if obj.get("customOptions") is not None else None,
            "userMenuOverrides": [ContextMenuEntry.from_dict(_item) for _item in obj["userMenuOverrides"]] if obj.get("userMenuOverrides") is not None else None,
            "allowedLicenses": obj.get("allowedLicenses"),
            "customLicenses": [License.from_dict(_item) for _item in obj["customLicenses"]] if obj.get("customLicenses") is not None else None,
            "workflow": ConfigWorkflow.from_dict(obj["workflow"]) if obj.get("workflow") is not None else None,
            "licenseDialogOnUpload": obj.get("licenseDialogOnUpload"),
            "nodeReport": obj.get("nodeReport"),
            "branding": obj.get("branding"),
            "rating": ConfigRating.from_dict(obj["rating"]) if obj.get("rating") is not None else None,
            "publishingNotice": obj.get("publishingNotice"),
            "siteTitle": obj.get("siteTitle"),
            "userDisplayName": obj.get("userDisplayName"),
            "userSecondaryDisplayName": obj.get("userSecondaryDisplayName"),
            "userAffiliation": obj.get("userAffiliation"),
            "defaultUsername": obj.get("defaultUsername"),
            "defaultPassword": obj.get("defaultPassword"),
            "banner": Banner.from_dict(obj["banner"]) if obj.get("banner") is not None else None,
            "availableMds": [AvailableMds.from_dict(_item) for _item in obj["availableMds"]] if obj.get("availableMds") is not None else None,
            "availableRepositories": obj.get("availableRepositories"),
            "searchViewType": obj.get("searchViewType"),
            "workspaceViewType": obj.get("workspaceViewType"),
            "itemsPerRequest": obj.get("itemsPerRequest"),
            "rendering": Rendering.from_dict(obj["rendering"]) if obj.get("rendering") is not None else None,
            "sessionExpiredDialog": obj.get("sessionExpiredDialog"),
            "loginDefaultLocation": obj.get("loginDefaultLocation"),
            "searchGroupResults": obj.get("searchGroupResults"),
            "mainnav": Mainnav.from_dict(obj["mainnav"]) if obj.get("mainnav") is not None else None,
            "searchSidenavMode": obj.get("searchSidenavMode"),
            "guest": Guest.from_dict(obj["guest"]) if obj.get("guest") is not None else None,
            "collections": Collections.from_dict(obj["collections"]) if obj.get("collections") is not None else None,
            "licenseAgreement": LicenseAgreement.from_dict(obj["licenseAgreement"]) if obj.get("licenseAgreement") is not None else None,
            "services": Services.from_dict(obj["services"]) if obj.get("services") is not None else None,
            "helpMenuOptions": [HelpMenuOptions.from_dict(_item) for _item in obj["helpMenuOptions"]] if obj.get("helpMenuOptions") is not None else None,
            "images": [Image.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "icons": [FontIcon.from_dict(_item) for _item in obj["icons"]] if obj.get("icons") is not None else None,
            "stream": Stream.from_dict(obj["stream"]) if obj.get("stream") is not None else None,
            "admin": Admin.from_dict(obj["admin"]) if obj.get("admin") is not None else None,
            "simpleEdit": SimpleEdit.from_dict(obj["simpleEdit"]) if obj.get("simpleEdit") is not None else None,
            "frontpage": ConfigFrontpage.from_dict(obj["frontpage"]) if obj.get("frontpage") is not None else None,
            "upload": ConfigUpload.from_dict(obj["upload"]) if obj.get("upload") is not None else None,
            "publish": ConfigPublish.from_dict(obj["publish"]) if obj.get("publish") is not None else None,
            "remote": ConfigRemote.from_dict(obj["remote"]) if obj.get("remote") is not None else None,
            "customCSS": obj.get("customCSS"),
            "themeColors": ConfigThemeColors.from_dict(obj["themeColors"]) if obj.get("themeColors") is not None else None,
            "privacy": ConfigPrivacy.from_dict(obj["privacy"]) if obj.get("privacy") is not None else None,
            "tutorial": ConfigTutorial.from_dict(obj["tutorial"]) if obj.get("tutorial") is not None else None
        })
        return _obj


