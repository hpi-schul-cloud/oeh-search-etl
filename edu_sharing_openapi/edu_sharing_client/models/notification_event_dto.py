# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.

    The version of the OpenAPI document: 1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from edu_sharing_client.models.user_data_dto import UserDataDTO
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from edu_sharing_client.models.add_to_collection_event_dto import AddToCollectionEventDTO
    from edu_sharing_client.models.comment_event_dto import CommentEventDTO
    from edu_sharing_client.models.invite_event_dto import InviteEventDTO
    from edu_sharing_client.models.metadata_suggestion_event_dto import MetadataSuggestionEventDTO
    from edu_sharing_client.models.node_issue_event_dto import NodeIssueEventDTO
    from edu_sharing_client.models.propose_for_collection_event_dto import ProposeForCollectionEventDTO
    from edu_sharing_client.models.rating_event_dto import RatingEventDTO
    from edu_sharing_client.models.workflow_event_dto import WorkflowEventDTO

class NotificationEventDTO(BaseModel):
    """
    NotificationEventDTO
    """ # noqa: E501
    timestamp: Optional[datetime] = None
    creator: Optional[UserDataDTO] = None
    receiver: Optional[UserDataDTO] = None
    status: Optional[StrictStr] = None
    id: Optional[StrictStr] = Field(default=None, alias="_id")
    var_class: StrictStr = Field(alias="_class")
    __properties: ClassVar[List[str]] = ["timestamp", "creator", "receiver", "status", "_id", "_class"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PENDING', 'SENT', 'READ', 'IGNORED']):
            raise ValueError("must be one of enum values ('PENDING', 'SENT', 'READ', 'IGNORED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = '_class'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'AddToCollectionEventDTO': 'AddToCollectionEventDTO','CommentEventDTO': 'CommentEventDTO','InviteEventDTO': 'InviteEventDTO','MetadataSuggestionEventDTO': 'MetadataSuggestionEventDTO','NodeIssueEventDTO': 'NodeIssueEventDTO','ProposeForCollectionEventDTO': 'ProposeForCollectionEventDTO','RatingEventDTO': 'RatingEventDTO','WorkflowEventDTO': 'WorkflowEventDTO'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[AddToCollectionEventDTO, CommentEventDTO, InviteEventDTO, MetadataSuggestionEventDTO, NodeIssueEventDTO, ProposeForCollectionEventDTO, RatingEventDTO, WorkflowEventDTO]]:
        """Create an instance of NotificationEventDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receiver
        if self.receiver:
            _dict['receiver'] = self.receiver.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[AddToCollectionEventDTO, CommentEventDTO, InviteEventDTO, MetadataSuggestionEventDTO, NodeIssueEventDTO, ProposeForCollectionEventDTO, RatingEventDTO, WorkflowEventDTO]]:
        """Create an instance of NotificationEventDTO from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'AddToCollectionEventDTO':
            return import_module("edu_sharing_client.models.add_to_collection_event_dto").AddToCollectionEventDTO.from_dict(obj)
        if object_type ==  'CommentEventDTO':
            return import_module("edu_sharing_client.models.comment_event_dto").CommentEventDTO.from_dict(obj)
        if object_type ==  'InviteEventDTO':
            return import_module("edu_sharing_client.models.invite_event_dto").InviteEventDTO.from_dict(obj)
        if object_type ==  'MetadataSuggestionEventDTO':
            return import_module("edu_sharing_client.models.metadata_suggestion_event_dto").MetadataSuggestionEventDTO.from_dict(obj)
        if object_type ==  'NodeIssueEventDTO':
            return import_module("edu_sharing_client.models.node_issue_event_dto").NodeIssueEventDTO.from_dict(obj)
        if object_type ==  'ProposeForCollectionEventDTO':
            return import_module("edu_sharing_client.models.propose_for_collection_event_dto").ProposeForCollectionEventDTO.from_dict(obj)
        if object_type ==  'RatingEventDTO':
            return import_module("edu_sharing_client.models.rating_event_dto").RatingEventDTO.from_dict(obj)
        if object_type ==  'WorkflowEventDTO':
            return import_module("edu_sharing_client.models.workflow_event_dto").WorkflowEventDTO.from_dict(obj)

        raise ValueError("NotificationEventDTO failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


