# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.

    The version of the OpenAPI document: 1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from edu_sharing_client.models.lti_tool_configuration import LTIToolConfiguration
from typing import Optional, Set
from typing_extensions import Self

class OpenIdRegistrationResult(BaseModel):
    """
    OpenIdRegistrationResult
    """ # noqa: E501
    client_id: Optional[StrictStr] = None
    response_types: Optional[List[StrictStr]] = None
    jwks_uri: Optional[StrictStr] = None
    initiate_login_uri: Optional[StrictStr] = None
    grant_types: Optional[List[StrictStr]] = None
    redirect_uris: Optional[List[StrictStr]] = None
    application_type: Optional[StrictStr] = None
    token_endpoint_auth_method: Optional[StrictStr] = None
    client_name: Optional[StrictStr] = None
    logo_uri: Optional[StrictStr] = None
    scope: Optional[StrictStr] = None
    https__purl_imsglobal_org_spec_lti_tool_configuration: Optional[LTIToolConfiguration] = Field(default=None, alias="https://purl.imsglobal.org/spec/lti-tool-configuration")
    __properties: ClassVar[List[str]] = ["client_id", "response_types", "jwks_uri", "initiate_login_uri", "grant_types", "redirect_uris", "application_type", "token_endpoint_auth_method", "client_name", "logo_uri", "scope", "https://purl.imsglobal.org/spec/lti-tool-configuration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenIdRegistrationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of https__purl_imsglobal_org_spec_lti_tool_configuration
        if self.https__purl_imsglobal_org_spec_lti_tool_configuration:
            _dict['https://purl.imsglobal.org/spec/lti-tool-configuration'] = self.https__purl_imsglobal_org_spec_lti_tool_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenIdRegistrationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "client_id": obj.get("client_id"),
            "response_types": obj.get("response_types"),
            "jwks_uri": obj.get("jwks_uri"),
            "initiate_login_uri": obj.get("initiate_login_uri"),
            "grant_types": obj.get("grant_types"),
            "redirect_uris": obj.get("redirect_uris"),
            "application_type": obj.get("application_type"),
            "token_endpoint_auth_method": obj.get("token_endpoint_auth_method"),
            "client_name": obj.get("client_name"),
            "logo_uri": obj.get("logo_uri"),
            "scope": obj.get("scope"),
            "https://purl.imsglobal.org/spec/lti-tool-configuration": LTIToolConfiguration.from_dict(obj["https://purl.imsglobal.org/spec/lti-tool-configuration"]) if obj.get("https://purl.imsglobal.org/spec/lti-tool-configuration") is not None else None
        })
        return _obj


