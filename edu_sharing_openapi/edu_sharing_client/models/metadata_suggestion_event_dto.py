# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.

    The version of the OpenAPI document: 1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from edu_sharing_client.models.node_data_dto import NodeDataDTO
from edu_sharing_client.models.notification_event_dto import NotificationEventDTO
from edu_sharing_client.models.user_data_dto import UserDataDTO
from edu_sharing_client.models.widget_data_dto import WidgetDataDTO
from typing import Optional, Set
from typing_extensions import Self

class MetadataSuggestionEventDTO(NotificationEventDTO):
    """
    MetadataSuggestionEventDTO
    """ # noqa: E501
    node: Optional[NodeDataDTO] = None
    caption_id: Optional[StrictStr] = Field(default=None, alias="captionId")
    caption: Optional[StrictStr] = None
    parent_id: Optional[StrictStr] = Field(default=None, alias="parentId")
    parent_caption: Optional[StrictStr] = Field(default=None, alias="parentCaption")
    widget: Optional[WidgetDataDTO] = None
    __properties: ClassVar[List[str]] = ["timestamp", "creator", "receiver", "status", "_id", "_class", "node", "captionId", "caption", "parentId", "parentCaption", "widget"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetadataSuggestionEventDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receiver
        if self.receiver:
            _dict['receiver'] = self.receiver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node
        if self.node:
            _dict['node'] = self.node.to_dict()
        # override the default output from pydantic by calling `to_dict()` of widget
        if self.widget:
            _dict['widget'] = self.widget.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetadataSuggestionEventDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "timestamp": obj.get("timestamp"),
            "creator": UserDataDTO.from_dict(obj["creator"]) if obj.get("creator") is not None else None,
            "receiver": UserDataDTO.from_dict(obj["receiver"]) if obj.get("receiver") is not None else None,
            "status": obj.get("status"),
            "_id": obj.get("_id"),
            "_class": obj.get("_class"),
            "node": NodeDataDTO.from_dict(obj["node"]) if obj.get("node") is not None else None,
            "captionId": obj.get("captionId"),
            "caption": obj.get("caption"),
            "parentId": obj.get("parentId"),
            "parentCaption": obj.get("parentCaption"),
            "widget": WidgetDataDTO.from_dict(obj["widget"]) if obj.get("widget") is not None else None
        })
        return _obj


