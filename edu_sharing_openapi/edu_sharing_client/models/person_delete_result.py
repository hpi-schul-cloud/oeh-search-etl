# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.

    The version of the OpenAPI document: 1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from edu_sharing_client.models.collection_counts import CollectionCounts
from edu_sharing_client.models.counts import Counts
from typing import Optional, Set
from typing_extensions import Self

class PersonDeleteResult(BaseModel):
    """
    PersonDeleteResult
    """ # noqa: E501
    authority_name: Optional[StrictStr] = Field(default=None, alias="authorityName")
    deleted_name: Optional[StrictStr] = Field(default=None, alias="deletedName")
    home_folder: Optional[Dict[str, Counts]] = Field(default=None, alias="homeFolder")
    shared_folders: Optional[Dict[str, Counts]] = Field(default=None, alias="sharedFolders")
    collections: Optional[CollectionCounts] = None
    comments: Optional[StrictInt] = None
    ratings: Optional[StrictInt] = None
    collection_feedback: Optional[StrictInt] = Field(default=None, alias="collectionFeedback")
    stream: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["authorityName", "deletedName", "homeFolder", "sharedFolders", "collections", "comments", "ratings", "collectionFeedback", "stream"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonDeleteResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in home_folder (dict)
        _field_dict = {}
        if self.home_folder:
            for _key_home_folder in self.home_folder:
                if self.home_folder[_key_home_folder]:
                    _field_dict[_key_home_folder] = self.home_folder[_key_home_folder].to_dict()
            _dict['homeFolder'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in shared_folders (dict)
        _field_dict = {}
        if self.shared_folders:
            for _key_shared_folders in self.shared_folders:
                if self.shared_folders[_key_shared_folders]:
                    _field_dict[_key_shared_folders] = self.shared_folders[_key_shared_folders].to_dict()
            _dict['sharedFolders'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of collections
        if self.collections:
            _dict['collections'] = self.collections.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonDeleteResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorityName": obj.get("authorityName"),
            "deletedName": obj.get("deletedName"),
            "homeFolder": dict(
                (_k, Counts.from_dict(_v))
                for _k, _v in obj["homeFolder"].items()
            )
            if obj.get("homeFolder") is not None
            else None,
            "sharedFolders": dict(
                (_k, Counts.from_dict(_v))
                for _k, _v in obj["sharedFolders"].items()
            )
            if obj.get("sharedFolders") is not None
            else None,
            "collections": CollectionCounts.from_dict(obj["collections"]) if obj.get("collections") is not None else None,
            "comments": obj.get("comments"),
            "ratings": obj.get("ratings"),
            "collectionFeedback": obj.get("collectionFeedback"),
            "stream": obj.get("stream")
        })
        return _obj


