# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.

    The version of the OpenAPI document: 1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from edu_sharing_client.models.node import Node
from typing import Optional, Set
from typing_extensions import Self

class LTISession(BaseModel):
    """
    LTISession
    """ # noqa: E501
    accept_multiple: Optional[StrictBool] = Field(default=None, alias="acceptMultiple")
    deeplink_return_url: Optional[StrictStr] = Field(default=None, alias="deeplinkReturnUrl")
    accept_types: Optional[List[StrictStr]] = Field(default=None, alias="acceptTypes")
    accept_presentation_document_targets: Optional[List[StrictStr]] = Field(default=None, alias="acceptPresentationDocumentTargets")
    can_confirm: Optional[StrictBool] = Field(default=None, alias="canConfirm")
    title: Optional[StrictStr] = None
    text: Optional[StrictStr] = None
    custom_content_node: Optional[Node] = Field(default=None, alias="customContentNode")
    __properties: ClassVar[List[str]] = ["acceptMultiple", "deeplinkReturnUrl", "acceptTypes", "acceptPresentationDocumentTargets", "canConfirm", "title", "text", "customContentNode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LTISession from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_content_node
        if self.custom_content_node:
            _dict['customContentNode'] = self.custom_content_node.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LTISession from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acceptMultiple": obj.get("acceptMultiple"),
            "deeplinkReturnUrl": obj.get("deeplinkReturnUrl"),
            "acceptTypes": obj.get("acceptTypes"),
            "acceptPresentationDocumentTargets": obj.get("acceptPresentationDocumentTargets"),
            "canConfirm": obj.get("canConfirm"),
            "title": obj.get("title"),
            "text": obj.get("text"),
            "customContentNode": Node.from_dict(obj["customContentNode"]) if obj.get("customContentNode") is not None else None
        })
        return _obj


