# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.

    The version of the OpenAPI document: 1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from edu_sharing_client.models.cache_info import CacheInfo
from edu_sharing_client.models.cache_member import CacheMember
from typing import Optional, Set
from typing_extensions import Self

class CacheCluster(BaseModel):
    """
    CacheCluster
    """ # noqa: E501
    instances: Optional[List[CacheMember]] = None
    cache_infos: Optional[List[CacheInfo]] = Field(default=None, alias="cacheInfos")
    local_member: Optional[StrictStr] = Field(default=None, alias="localMember")
    free_memory: Optional[StrictInt] = Field(default=None, alias="freeMemory")
    total_memory: Optional[StrictInt] = Field(default=None, alias="totalMemory")
    max_memory: Optional[StrictInt] = Field(default=None, alias="maxMemory")
    available_processors: Optional[StrictInt] = Field(default=None, alias="availableProcessors")
    time_stamp: Optional[datetime] = Field(default=None, alias="timeStamp")
    group_name: Optional[StrictStr] = Field(default=None, alias="groupName")
    __properties: ClassVar[List[str]] = ["instances", "cacheInfos", "localMember", "freeMemory", "totalMemory", "maxMemory", "availableProcessors", "timeStamp", "groupName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CacheCluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in instances (list)
        _items = []
        if self.instances:
            for _item_instances in self.instances:
                if _item_instances:
                    _items.append(_item_instances.to_dict())
            _dict['instances'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cache_infos (list)
        _items = []
        if self.cache_infos:
            for _item_cache_infos in self.cache_infos:
                if _item_cache_infos:
                    _items.append(_item_cache_infos.to_dict())
            _dict['cacheInfos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CacheCluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "instances": [CacheMember.from_dict(_item) for _item in obj["instances"]] if obj.get("instances") is not None else None,
            "cacheInfos": [CacheInfo.from_dict(_item) for _item in obj["cacheInfos"]] if obj.get("cacheInfos") is not None else None,
            "localMember": obj.get("localMember"),
            "freeMemory": obj.get("freeMemory"),
            "totalMemory": obj.get("totalMemory"),
            "maxMemory": obj.get("maxMemory"),
            "availableProcessors": obj.get("availableProcessors"),
            "timeStamp": obj.get("timeStamp"),
            "groupName": obj.get("groupName")
        })
        return _obj


