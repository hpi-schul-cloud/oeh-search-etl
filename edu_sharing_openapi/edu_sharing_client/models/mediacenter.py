# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.

    The version of the OpenAPI document: 1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from edu_sharing_client.models.group_profile import GroupProfile
from edu_sharing_client.models.node_ref import NodeRef
from edu_sharing_client.models.organization import Organization
from typing import Optional, Set
from typing_extensions import Self

class Mediacenter(BaseModel):
    """
    Mediacenter
    """ # noqa: E501
    properties: Optional[Dict[str, List[StrictStr]]] = None
    editable: Optional[StrictBool] = None
    signup_method: Optional[StrictStr] = Field(default=None, alias="signupMethod")
    ref: Optional[NodeRef] = None
    aspects: Optional[List[StrictStr]] = None
    organizations: Optional[List[Organization]] = None
    authority_name: StrictStr = Field(alias="authorityName")
    authority_type: Optional[StrictStr] = Field(default=None, alias="authorityType")
    group_name: Optional[StrictStr] = Field(default=None, alias="groupName")
    profile: Optional[GroupProfile] = None
    administration_access: Optional[StrictBool] = Field(default=None, alias="administrationAccess")
    __properties: ClassVar[List[str]] = ["properties", "editable", "signupMethod", "ref", "aspects", "organizations", "authorityName", "authorityType", "groupName", "profile", "administrationAccess"]

    @field_validator('signup_method')
    def signup_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['simple', 'password', 'list']):
            raise ValueError("must be one of enum values ('simple', 'password', 'list')")
        return value

    @field_validator('authority_type')
    def authority_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['USER', 'GROUP', 'OWNER', 'EVERYONE', 'GUEST']):
            raise ValueError("must be one of enum values ('USER', 'GROUP', 'OWNER', 'EVERYONE', 'GUEST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Mediacenter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ref
        if self.ref:
            _dict['ref'] = self.ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in organizations (list)
        _items = []
        if self.organizations:
            for _item_organizations in self.organizations:
                if _item_organizations:
                    _items.append(_item_organizations.to_dict())
            _dict['organizations'] = _items
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Mediacenter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "properties": obj.get("properties"),
            "editable": obj.get("editable"),
            "signupMethod": obj.get("signupMethod"),
            "ref": NodeRef.from_dict(obj["ref"]) if obj.get("ref") is not None else None,
            "aspects": obj.get("aspects"),
            "organizations": [Organization.from_dict(_item) for _item in obj["organizations"]] if obj.get("organizations") is not None else None,
            "authorityName": obj.get("authorityName"),
            "authorityType": obj.get("authorityType"),
            "groupName": obj.get("groupName"),
            "profile": GroupProfile.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "administrationAccess": obj.get("administrationAccess")
        })
        return _obj


