# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.

    The version of the OpenAPI document: 1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from edu_sharing_client.models.lti_platform_configuration import LTIPlatformConfiguration
from typing import Optional, Set
from typing_extensions import Self

class OpenIdConfiguration(BaseModel):
    """
    OpenIdConfiguration
    """ # noqa: E501
    issuer: Optional[StrictStr] = None
    token_endpoint: Optional[StrictStr] = None
    token_endpoint_auth_methods_supported: Optional[List[StrictStr]] = None
    token_endpoint_auth_signing_alg_values_supported: Optional[List[StrictStr]] = None
    jwks_uri: Optional[StrictStr] = None
    authorization_endpoint: Optional[StrictStr] = None
    registration_endpoint: Optional[StrictStr] = None
    scopes_supported: Optional[List[StrictStr]] = None
    response_types_supported: Optional[List[StrictStr]] = None
    subject_types_supported: Optional[List[StrictStr]] = None
    id_token_signing_alg_values_supported: Optional[List[StrictStr]] = None
    claims_supported: Optional[List[StrictStr]] = None
    https__purl_imsglobal_org_spec_lti_platform_configuration: Optional[LTIPlatformConfiguration] = Field(default=None, alias="https://purl.imsglobal.org/spec/lti-platform-configuration")
    __properties: ClassVar[List[str]] = ["issuer", "token_endpoint", "token_endpoint_auth_methods_supported", "token_endpoint_auth_signing_alg_values_supported", "jwks_uri", "authorization_endpoint", "registration_endpoint", "scopes_supported", "response_types_supported", "subject_types_supported", "id_token_signing_alg_values_supported", "claims_supported", "https://purl.imsglobal.org/spec/lti-platform-configuration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenIdConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of https__purl_imsglobal_org_spec_lti_platform_configuration
        if self.https__purl_imsglobal_org_spec_lti_platform_configuration:
            _dict['https://purl.imsglobal.org/spec/lti-platform-configuration'] = self.https__purl_imsglobal_org_spec_lti_platform_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenIdConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "issuer": obj.get("issuer"),
            "token_endpoint": obj.get("token_endpoint"),
            "token_endpoint_auth_methods_supported": obj.get("token_endpoint_auth_methods_supported"),
            "token_endpoint_auth_signing_alg_values_supported": obj.get("token_endpoint_auth_signing_alg_values_supported"),
            "jwks_uri": obj.get("jwks_uri"),
            "authorization_endpoint": obj.get("authorization_endpoint"),
            "registration_endpoint": obj.get("registration_endpoint"),
            "scopes_supported": obj.get("scopes_supported"),
            "response_types_supported": obj.get("response_types_supported"),
            "subject_types_supported": obj.get("subject_types_supported"),
            "id_token_signing_alg_values_supported": obj.get("id_token_signing_alg_values_supported"),
            "claims_supported": obj.get("claims_supported"),
            "https://purl.imsglobal.org/spec/lti-platform-configuration": LTIPlatformConfiguration.from_dict(obj["https://purl.imsglobal.org/spec/lti-platform-configuration"]) if obj.get("https://purl.imsglobal.org/spec/lti-platform-configuration") is not None else None
        })
        return _obj


