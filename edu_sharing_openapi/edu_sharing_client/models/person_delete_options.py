# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.

    The version of the OpenAPI document: 1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from edu_sharing_client.models.collection_options import CollectionOptions
from edu_sharing_client.models.delete_option import DeleteOption
from edu_sharing_client.models.home_folder_options import HomeFolderOptions
from edu_sharing_client.models.shared_folder_options import SharedFolderOptions
from typing import Optional, Set
from typing_extensions import Self

class PersonDeleteOptions(BaseModel):
    """
    PersonDeleteOptions
    """ # noqa: E501
    cleanup_metadata: Optional[StrictBool] = Field(default=None, alias="cleanupMetadata")
    home_folder: Optional[HomeFolderOptions] = Field(default=None, alias="homeFolder")
    shared_folders: Optional[SharedFolderOptions] = Field(default=None, alias="sharedFolders")
    collections: Optional[CollectionOptions] = None
    ratings: Optional[DeleteOption] = None
    comments: Optional[DeleteOption] = None
    collection_feedback: Optional[DeleteOption] = Field(default=None, alias="collectionFeedback")
    statistics: Optional[DeleteOption] = None
    stream: Optional[DeleteOption] = None
    receiver: Optional[StrictStr] = None
    receiver_group: Optional[StrictStr] = Field(default=None, alias="receiverGroup")
    __properties: ClassVar[List[str]] = ["cleanupMetadata", "homeFolder", "sharedFolders", "collections", "ratings", "comments", "collectionFeedback", "statistics", "stream", "receiver", "receiverGroup"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonDeleteOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of home_folder
        if self.home_folder:
            _dict['homeFolder'] = self.home_folder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shared_folders
        if self.shared_folders:
            _dict['sharedFolders'] = self.shared_folders.to_dict()
        # override the default output from pydantic by calling `to_dict()` of collections
        if self.collections:
            _dict['collections'] = self.collections.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ratings
        if self.ratings:
            _dict['ratings'] = self.ratings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of comments
        if self.comments:
            _dict['comments'] = self.comments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of collection_feedback
        if self.collection_feedback:
            _dict['collectionFeedback'] = self.collection_feedback.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stream
        if self.stream:
            _dict['stream'] = self.stream.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonDeleteOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cleanupMetadata": obj.get("cleanupMetadata"),
            "homeFolder": HomeFolderOptions.from_dict(obj["homeFolder"]) if obj.get("homeFolder") is not None else None,
            "sharedFolders": SharedFolderOptions.from_dict(obj["sharedFolders"]) if obj.get("sharedFolders") is not None else None,
            "collections": CollectionOptions.from_dict(obj["collections"]) if obj.get("collections") is not None else None,
            "ratings": DeleteOption.from_dict(obj["ratings"]) if obj.get("ratings") is not None else None,
            "comments": DeleteOption.from_dict(obj["comments"]) if obj.get("comments") is not None else None,
            "collectionFeedback": DeleteOption.from_dict(obj["collectionFeedback"]) if obj.get("collectionFeedback") is not None else None,
            "statistics": DeleteOption.from_dict(obj["statistics"]) if obj.get("statistics") is not None else None,
            "stream": DeleteOption.from_dict(obj["stream"]) if obj.get("stream") is not None else None,
            "receiver": obj.get("receiver"),
            "receiverGroup": obj.get("receiverGroup")
        })
        return _obj


