# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.

    The version of the OpenAPI document: 1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from edu_sharing_client.models.lti_session import LTISession
from edu_sharing_client.models.remote_auth_description import RemoteAuthDescription
from typing import Optional, Set
from typing_extensions import Self

class Login(BaseModel):
    """
    Login
    """ # noqa: E501
    remote_authentications: Optional[Dict[str, RemoteAuthDescription]] = Field(default=None, alias="remoteAuthentications")
    is_valid_login: StrictBool = Field(alias="isValidLogin")
    is_admin: StrictBool = Field(alias="isAdmin")
    lti_session: Optional[LTISession] = Field(default=None, alias="ltiSession")
    current_scope: StrictStr = Field(alias="currentScope")
    user_home: Optional[StrictStr] = Field(default=None, alias="userHome")
    session_timeout: StrictInt = Field(alias="sessionTimeout")
    tool_permissions: Optional[List[StrictStr]] = Field(default=None, alias="toolPermissions")
    status_code: Optional[StrictStr] = Field(default=None, alias="statusCode")
    authority_name: Optional[StrictStr] = Field(default=None, alias="authorityName")
    is_guest: StrictBool = Field(alias="isGuest")
    __properties: ClassVar[List[str]] = ["remoteAuthentications", "isValidLogin", "isAdmin", "ltiSession", "currentScope", "userHome", "sessionTimeout", "toolPermissions", "statusCode", "authorityName", "isGuest"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Login from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in remote_authentications (dict)
        _field_dict = {}
        if self.remote_authentications:
            for _key_remote_authentications in self.remote_authentications:
                if self.remote_authentications[_key_remote_authentications]:
                    _field_dict[_key_remote_authentications] = self.remote_authentications[_key_remote_authentications].to_dict()
            _dict['remoteAuthentications'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of lti_session
        if self.lti_session:
            _dict['ltiSession'] = self.lti_session.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Login from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "remoteAuthentications": dict(
                (_k, RemoteAuthDescription.from_dict(_v))
                for _k, _v in obj["remoteAuthentications"].items()
            )
            if obj.get("remoteAuthentications") is not None
            else None,
            "isValidLogin": obj.get("isValidLogin"),
            "isAdmin": obj.get("isAdmin"),
            "ltiSession": LTISession.from_dict(obj["ltiSession"]) if obj.get("ltiSession") is not None else None,
            "currentScope": obj.get("currentScope"),
            "userHome": obj.get("userHome"),
            "sessionTimeout": obj.get("sessionTimeout"),
            "toolPermissions": obj.get("toolPermissions"),
            "statusCode": obj.get("statusCode"),
            "authorityName": obj.get("authorityName"),
            "isGuest": obj.get("isGuest")
        })
        return _obj


