# coding: utf-8

"""
    edu-sharing Repository REST API

    The public restful API of the edu-sharing repository.

    The version of the OpenAPI document: 1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from edu_sharing_client.models.connector_file_type import ConnectorFileType
from typing import Optional, Set
from typing_extensions import Self

class Connector(BaseModel):
    """
    Connector
    """ # noqa: E501
    id: Optional[StrictStr] = None
    icon: Optional[StrictStr] = None
    show_new: StrictBool = Field(description="false", alias="showNew")
    parameters: Optional[List[StrictStr]] = None
    filetypes: Optional[List[ConnectorFileType]] = None
    only_desktop: Optional[StrictBool] = Field(default=None, alias="onlyDesktop")
    has_view_mode: Optional[StrictBool] = Field(default=None, alias="hasViewMode")
    __properties: ClassVar[List[str]] = ["id", "icon", "showNew", "parameters", "filetypes", "onlyDesktop", "hasViewMode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Connector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filetypes (list)
        _items = []
        if self.filetypes:
            for _item_filetypes in self.filetypes:
                if _item_filetypes:
                    _items.append(_item_filetypes.to_dict())
            _dict['filetypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Connector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "icon": obj.get("icon"),
            "showNew": obj.get("showNew"),
            "parameters": obj.get("parameters"),
            "filetypes": [ConnectorFileType.from_dict(_item) for _item in obj["filetypes"]] if obj.get("filetypes") is not None else None,
            "onlyDesktop": obj.get("onlyDesktop"),
            "hasViewMode": obj.get("hasViewMode")
        })
        return _obj


